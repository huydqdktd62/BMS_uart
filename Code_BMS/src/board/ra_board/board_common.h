/*
 * board_common.h
 *
 *  Created on: Apr 16, 2022
 *      Author: quangnd
 */

#ifndef BOARD_RA_BOARD_BOARD_COMMON_H_
#define BOARD_RA_BOARD_BOARD_COMMON_H_

#include "hal_data.h"

typedef enum Hw_Err_t{

 HW_NO_ERR                     =FSP_SUCCESS,

 HW_ERR_ASSERTION             =                     FSP_ERR_ASSERTION             ,                      ///< A critical assertion has failed
 HW_ERR_INVALID_POINTER       =                     FSP_ERR_INVALID_POINTER       ,                      ///< Pointer points to invalid memory location
 HW_ERR_INVALID_ARGUMENT      =                     FSP_ERR_INVALID_ARGUMENT      ,                      ///< Invalid input parameter
 HW_ERR_INVALID_CHANNEL       =                     FSP_ERR_INVALID_CHANNEL       ,                      ///< Selected channel does not exist
 HW_ERR_INVALID_MODE          =                     FSP_ERR_INVALID_MODE          ,                      ///< Unsupported or incorrect mode
 HW_ERR_UNSUPPORTED           =                     FSP_ERR_UNSUPPORTED           ,                      ///< Selected mode not supported by this API
 HW_ERR_NOT_OPEN              =                     FSP_ERR_NOT_OPEN              ,                      ///< Requested channel is not configured or API not open
 HW_ERR_IN_USE                =                     FSP_ERR_IN_USE                ,                      ///< Channel/peripheral is running/busy
 HW_ERR_OUT_OF_MEMORY         =                     FSP_ERR_OUT_OF_MEMORY         ,                      ///< Allocate more memory in the driver's cfg.h
 HW_ERR_HW_LOCKED             =                     FSP_ERR_HW_LOCKED             ,                     ///< Hardware is locked
 HW_ERR_IRQ_BSP_DISABLED      =                     FSP_ERR_IRQ_BSP_DISABLED      ,                     ///< IRQ not enabled in BSP
 HW_ERR_OVERFLOW              =                     FSP_ERR_OVERFLOW              ,                     ///< Hardware overflow
 HW_ERR_UNDERFLOW             =                     FSP_ERR_UNDERFLOW             ,                     ///< Hardware underflow
 HW_ERR_ALREADY_OPEN          =                     FSP_ERR_ALREADY_OPEN          ,                     ///< Requested channel is already open in a different configuration
 HW_ERR_APPROXIMATION         =                     FSP_ERR_APPROXIMATION         ,                     ///< Could not set value to exact result
 HW_ERR_CLAMPED               =                     FSP_ERR_CLAMPED               ,                     ///< Value had to be limited for some reason
 HW_ERR_INVALID_RATE          =                     FSP_ERR_INVALID_RATE          ,                     ///< Selected rate could not be met
 HW_ERR_ABORTED               =                     FSP_ERR_ABORTED               ,                     ///< An operation was aborted
 HW_ERR_NOT_ENABLED           =                     FSP_ERR_NOT_ENABLED           ,                     ///< Requested operation is not enabled
 HW_ERR_TIMEOUT               =                     FSP_ERR_TIMEOUT               ,                     ///< Timeout error
 HW_ERR_INVALID_BLOCKS        =                     FSP_ERR_INVALID_BLOCKS        ,                     ///< Invalid number of blocks supplied
 HW_ERR_INVALID_ADDRESS       =                     FSP_ERR_INVALID_ADDRESS       ,                     ///< Invalid address supplied
 HW_ERR_INVALID_SIZE          =                     FSP_ERR_INVALID_SIZE          ,                     ///< Invalid size/length supplied for operation
 HW_ERR_WRITE_FAILED          =                     FSP_ERR_WRITE_FAILED          ,                     ///< Write operation failed
 HW_ERR_ERASE_FAILED          =                     FSP_ERR_ERASE_FAILED          ,                     ///< Erase operation failed
 HW_ERR_INVALID_CALL          =                     FSP_ERR_INVALID_CALL          ,                     ///< Invalid function call is made
 HW_ERR_INVALID_HW_CONDITION  =                     FSP_ERR_INVALID_HW_CONDITION  ,                     ///< Detected hardware is in invalid condition
 HW_ERR_INVALID_FACTORY_FLASH =                     FSP_ERR_INVALID_FACTORY_FLASH ,                     ///< Factory flash is not available on this MCU
 HW_ERR_INVALID_STATE         =                     FSP_ERR_INVALID_STATE         ,                     ///< API or command not valid in the current state
 HW_ERR_NOT_ERASED            =                     FSP_ERR_NOT_ERASED            ,                     ///< Erase verification failed
 HW_ERR_SECTOR_RELEASE_FAILED =                     FSP_ERR_SECTOR_RELEASE_FAILED ,                     ///< Sector release failed
 HW_ERR_NOT_INITIALIZED       =                     FSP_ERR_NOT_INITIALIZED       ,                     ///< Required initialization not complete
 HW_ERR_NOT_FOUND             =                     FSP_ERR_NOT_FOUND             ,                     ///< The requested item could not be found
 HW_ERR_NO_CALLBACK_MEMORY    =                     FSP_ERR_NO_CALLBACK_MEMORY    ,                     ///< Non-secure callback memory not provided for non-secure callback
 HW_ERR_BUFFER_EMPTY          =                     FSP_ERR_BUFFER_EMPTY          ,                     ///< No data available in buffer
 HW_ERR_INVALID_DATA          =                     FSP_ERR_INVALID_DATA          ,                     ///< Accuracy of data is not guaranteed
 HW_ERR_INTERNAL            =                       FSP_ERR_INTERNAL            ,                             ///< Internal error
 HW_ERR_WAIT_ABORTED        =                       FSP_ERR_WAIT_ABORTED        ,                             ///< Wait aborted
 HW_ERR_FRAMING            =                        FSP_ERR_FRAMING            ,                       ///< Framing error occurs
 HW_ERR_BREAK_DETECT       =                        FSP_ERR_BREAK_DETECT       ,                       ///< Break signal detects
 HW_ERR_PARITY             =                        FSP_ERR_PARITY             ,                       ///< Parity error occurs
 HW_ERR_RXBUF_OVERFLOW     =                        FSP_ERR_RXBUF_OVERFLOW     ,                       ///< Receive queue overflow
 HW_ERR_QUEUE_UNAVAILABLE  =                        FSP_ERR_QUEUE_UNAVAILABLE  ,                       ///< Can't open s/w queue
 HW_ERR_INSUFFICIENT_SPACE =                        FSP_ERR_INSUFFICIENT_SPACE ,                       ///< Not enough space in transmission circular buffer
 HW_ERR_INSUFFICIENT_DATA  =                        FSP_ERR_INSUFFICIENT_DATA  ,                       ///< Not enough data in receive circular buffer
 HW_ERR_TRANSFER_ABORTED =                          FSP_ERR_TRANSFER_ABORTED ,                         ///< The data transfer was aborted.
 HW_ERR_MODE_FAULT       =                          FSP_ERR_MODE_FAULT       ,                         ///< Mode fault error.
 HW_ERR_READ_OVERFLOW    =                          FSP_ERR_READ_OVERFLOW    ,                         ///< Read overflow.
 HW_ERR_SPI_PARITY       =                          FSP_ERR_SPI_PARITY       ,                         ///< Parity error.
 HW_ERR_OVERRUN          =                          FSP_ERR_OVERRUN          ,                         ///< Overrun error.
 HW_ERR_CLOCK_INACTIVE        =                     FSP_ERR_CLOCK_INACTIVE        ,                    ///< Inactive clock specified as system clock.
 HW_ERR_CLOCK_ACTIVE          =                     FSP_ERR_CLOCK_ACTIVE          ,                    ///< Active clock source cannot be modified without stopping first.
 HW_ERR_NOT_STABILIZED        =                     FSP_ERR_NOT_STABILIZED        ,                    ///< Clock has not stabilized after its been turned on/off
 HW_ERR_PLL_SRC_INACTIVE      =                     FSP_ERR_PLL_SRC_INACTIVE      ,                    ///< PLL initialization attempted when PLL source is turned off
 HW_ERR_OSC_STOP_DET_ENABLED  =                     FSP_ERR_OSC_STOP_DET_ENABLED  ,                    ///< Illegal attempt to stop LOCO when Oscillation stop is enabled
 HW_ERR_OSC_STOP_DETECTED     =                     FSP_ERR_OSC_STOP_DETECTED     ,                    ///< The Oscillation stop detection status flag is set
 HW_ERR_OSC_STOP_CLOCK_ACTIVE =                     FSP_ERR_OSC_STOP_CLOCK_ACTIVE ,                    ///< Attempt to clear Oscillation Stop Detect Status with PLL/MAIN_OSC active
 HW_ERR_CLKOUT_EXCEEDED       =                     FSP_ERR_CLKOUT_EXCEEDED       ,                    ///< Output on target output clock pin exceeds maximum supported limit
 HW_ERR_USB_MODULE_ENABLED    =                     FSP_ERR_USB_MODULE_ENABLED    ,                    ///< USB clock configure request with USB Module enabled
 HW_ERR_HARDWARE_TIMEOUT      =                     FSP_ERR_HARDWARE_TIMEOUT      ,                    ///< A register read or write timed out
 HW_ERR_LOW_VOLTAGE_MODE      =                     FSP_ERR_LOW_VOLTAGE_MODE      ,                    ///< Invalid clock setting attempted in low voltage mode
 HW_ERR_PE_FAILURE             =                    FSP_ERR_PE_FAILURE             ,                   ///< Unable to enter Programming mode.
 HW_ERR_CMD_LOCKED             =                    FSP_ERR_CMD_LOCKED             ,                   ///< Peripheral in command locked state
 HW_ERR_FCLK                   =                    FSP_ERR_FCLK                   ,                   ///< FCLK must be >= 4 MHz
 HW_ERR_INVALID_LINKED_ADDRESS =                    FSP_ERR_INVALID_LINKED_ADDRESS ,                   ///< Function or data are linked at an invalid region of memory
 HW_ERR_BLANK_CHECK_FAILED     =                    FSP_ERR_BLANK_CHECK_FAILED     ,                   ///< Blank check operation failed
 HW_ERR_INVALID_CAC_REF_CLOCK       =               FSP_ERR_INVALID_CAC_REF_CLOCK       ,                    ///< Measured clock rate < reference clock rate
 HW_ERR_INVALID_RESULT             =                FSP_ERR_INVALID_RESULT             ,                           ///< The result of one or more calculations was +/- infinity.
 HW_ERR_CLOCK_GENERATION           =                FSP_ERR_CLOCK_GENERATION           ,              ///< Clock cannot be specified as system clock
 HW_ERR_INVALID_TIMING_SETTING     =                FSP_ERR_INVALID_TIMING_SETTING     ,              ///< Invalid timing parameter
 HW_ERR_INVALID_LAYER_SETTING      =                FSP_ERR_INVALID_LAYER_SETTING      ,              ///< Invalid layer parameter
 HW_ERR_INVALID_ALIGNMENT          =                FSP_ERR_INVALID_ALIGNMENT          ,              ///< Invalid memory alignment found
 HW_ERR_INVALID_GAMMA_SETTING      =                FSP_ERR_INVALID_GAMMA_SETTING      ,              ///< Invalid gamma correction parameter
 HW_ERR_INVALID_LAYER_FORMAT       =                FSP_ERR_INVALID_LAYER_FORMAT       ,              ///< Invalid color format in layer
 HW_ERR_INVALID_UPDATE_TIMING      =                FSP_ERR_INVALID_UPDATE_TIMING      ,              ///< Invalid timing for register update
 HW_ERR_INVALID_CLUT_ACCESS        =                FSP_ERR_INVALID_CLUT_ACCESS        ,              ///< Invalid access to CLUT entry
 HW_ERR_INVALID_FADE_SETTING       =                FSP_ERR_INVALID_FADE_SETTING       ,              ///< Invalid fade-in/fade-out setting
 HW_ERR_INVALID_BRIGHTNESS_SETTING =                FSP_ERR_INVALID_BRIGHTNESS_SETTING ,              ///< Invalid gamma correction parameter
 HW_ERR_JPEG_ERR                                =   FSP_ERR_JPEG_ERR                                , ///< JPEG error
 HW_ERR_JPEG_SOI_NOT_DETECTED                   =   FSP_ERR_JPEG_SOI_NOT_DETECTED                   , ///< SOI not detected until EOI detected.
 HW_ERR_JPEG_SOF1_TO_SOFF_DETECTED              =   FSP_ERR_JPEG_SOF1_TO_SOFF_DETECTED              , ///< SOF1 to SOFF detected.
 HW_ERR_JPEG_UNSUPPORTED_PIXEL_FORMAT           =   FSP_ERR_JPEG_UNSUPPORTED_PIXEL_FORMAT           , ///< Unprovided pixel format detected.
 HW_ERR_JPEG_SOF_ACCURACY_ERROR                 =   FSP_ERR_JPEG_SOF_ACCURACY_ERROR                 , ///< SOF accuracy error: other than 8 detected.
 HW_ERR_JPEG_DQT_ACCURACY_ERROR                 =   FSP_ERR_JPEG_DQT_ACCURACY_ERROR                 , ///< DQT accuracy error: other than 0 detected.
 HW_ERR_JPEG_COMPONENT_ERROR1                   =   FSP_ERR_JPEG_COMPONENT_ERROR1                   , ///< Component error 1: the number of SOF0 header components detected is other than 1, 3, or 4.
 HW_ERR_JPEG_COMPONENT_ERROR2                   =   FSP_ERR_JPEG_COMPONENT_ERROR2                   , ///< Component error 2: the number of components differs between SOF0 header and SOS.
 HW_ERR_JPEG_SOF0_DQT_DHT_NOT_DETECTED          =   FSP_ERR_JPEG_SOF0_DQT_DHT_NOT_DETECTED          , ///< SOF0, DQT, and DHT not detected when SOS detected.
 HW_ERR_JPEG_SOS_NOT_DETECTED                   =   FSP_ERR_JPEG_SOS_NOT_DETECTED                   , ///< SOS not detected: SOS not detected until EOI detected.
 HW_ERR_JPEG_EOI_NOT_DETECTED                   =   FSP_ERR_JPEG_EOI_NOT_DETECTED                   , ///< EOI not detected (default)
 HW_ERR_JPEG_RESTART_INTERVAL_DATA_NUMBER_ERROR =   FSP_ERR_JPEG_RESTART_INTERVAL_DATA_NUMBER_ERROR , ///< Restart interval data number error detected.
 HW_ERR_JPEG_IMAGE_SIZE_ERROR                   =   FSP_ERR_JPEG_IMAGE_SIZE_ERROR                   , ///< Image size error detected.
 HW_ERR_JPEG_LAST_MCU_DATA_NUMBER_ERROR         =   FSP_ERR_JPEG_LAST_MCU_DATA_NUMBER_ERROR         , ///< Last MCU data number error detected.
 HW_ERR_JPEG_BLOCK_DATA_NUMBER_ERROR            =   FSP_ERR_JPEG_BLOCK_DATA_NUMBER_ERROR            , ///< Block data number error detected.
 HW_ERR_JPEG_BUFFERSIZE_NOT_ENOUGH              =   FSP_ERR_JPEG_BUFFERSIZE_NOT_ENOUGH              , ///< User provided buffer size not enough
 HW_ERR_JPEG_UNSUPPORTED_IMAGE_SIZE             =   FSP_ERR_JPEG_UNSUPPORTED_IMAGE_SIZE             , ///< JPEG Image size is not aligned with MCU
 HW_ERR_CALIBRATE_FAILED=                           FSP_ERR_CALIBRATE_FAILED,                        ///< Calibration failed
 HW_ERR_IIRFA_ECC_1BIT=                             FSP_ERR_IIRFA_ECC_1BIT,                          ///< 1-bit ECC error detected
 HW_ERR_IIRFA_ECC_2BIT=                             FSP_ERR_IIRFA_ECC_2BIT,                          ///< 2-bit ECC error detected
 HW_ERR_IP_HARDWARE_NOT_PRESENT =                   FSP_ERR_IP_HARDWARE_NOT_PRESENT ,                 ///< Requested IP does not exist on this device
 HW_ERR_IP_UNIT_NOT_PRESENT     =                   FSP_ERR_IP_UNIT_NOT_PRESENT     ,                 ///< Requested unit does not exist on this device
 HW_ERR_IP_CHANNEL_NOT_PRESENT  =                   FSP_ERR_IP_CHANNEL_NOT_PRESENT  ,                 ///< Requested channel does not exist on this device
 HW_ERR_USB_FAILED      =                           FSP_ERR_USB_FAILED      ,
 HW_ERR_USB_BUSY        =                           FSP_ERR_USB_BUSY        ,
 HW_ERR_USB_SIZE_SHORT  =                           FSP_ERR_USB_SIZE_SHORT  ,
 HW_ERR_USB_SIZE_OVER   =                           FSP_ERR_USB_SIZE_OVER   ,
 HW_ERR_USB_NOT_OPEN    =                           FSP_ERR_USB_NOT_OPEN    ,
 HW_ERR_USB_NOT_SUSPEND =                           FSP_ERR_USB_NOT_SUSPEND ,
 HW_ERR_USB_PARAMETER   =                           FSP_ERR_USB_PARAMETER   ,
 HW_ERR_NO_MORE_BUFFER           =        FSP_ERR_NO_MORE_BUFFER           ,         ///< No more buffer found in the memory block pool
 HW_ERR_ILLEGAL_BUFFER_ADDRESS   =        FSP_ERR_ILLEGAL_BUFFER_ADDRESS   ,         ///< Buffer address is out of block memory pool
 HW_ERR_INVALID_WORKBUFFER_SIZE  =        FSP_ERR_INVALID_WORKBUFFER_SIZE  ,         ///< Work buffer size is invalid
 HW_ERR_INVALID_MSG_BUFFER_SIZE  =        FSP_ERR_INVALID_MSG_BUFFER_SIZE  ,         ///< Message buffer size is invalid
 HW_ERR_TOO_MANY_BUFFERS         =        FSP_ERR_TOO_MANY_BUFFERS         ,         ///< Number of buffer is too many
 HW_ERR_NO_SUBSCRIBER_FOUND      =        FSP_ERR_NO_SUBSCRIBER_FOUND      ,         ///< No message subscriber found
 HW_ERR_MESSAGE_QUEUE_EMPTY      =        FSP_ERR_MESSAGE_QUEUE_EMPTY      ,         ///< No message found in the message queue
 HW_ERR_MESSAGE_QUEUE_FULL       =        FSP_ERR_MESSAGE_QUEUE_FULL       ,         ///< No room for new message in the message queue
 HW_ERR_ILLEGAL_SUBSCRIBER_LISTS =        FSP_ERR_ILLEGAL_SUBSCRIBER_LISTS ,         ///< Message subscriber lists is illegal
 HW_ERR_BUFFER_RELEASED          =        FSP_ERR_BUFFER_RELEASED          ,         ///< Buffer has been released
 HW_ERR_D2D_ERROR_INIT      =             FSP_ERR_D2D_ERROR_INIT      ,              ///< D/AVE 2D has an error in the initialization
 HW_ERR_D2D_ERROR_DEINIT    =             FSP_ERR_D2D_ERROR_DEINIT    ,              ///< D/AVE 2D has an error in the initialization
 HW_ERR_D2D_ERROR_RENDERING =             FSP_ERR_D2D_ERROR_RENDERING ,              ///< D/AVE 2D has an error in the rendering
 HW_ERR_D2D_ERROR_SIZE      =             FSP_ERR_D2D_ERROR_SIZE      ,              ///< D/AVE 2D has an error in the rendering
 HW_ERR_ETHER_ERROR_NO_DATA              =FSP_ERR_ETHER_ERROR_NO_DATA              , ///< No Data in Receive buffer.
 HW_ERR_ETHER_ERROR_LINK                 =FSP_ERR_ETHER_ERROR_LINK                 , ///< ETHERC/EDMAC has an error in the Auto-negotiation
 HW_ERR_ETHER_ERROR_MAGIC_PACKET_MODE    =FSP_ERR_ETHER_ERROR_MAGIC_PACKET_MODE    , ///< As a Magic Packet is being detected, and transmission/reception is not enabled
 HW_ERR_ETHER_ERROR_TRANSMIT_BUFFER_FULL =FSP_ERR_ETHER_ERROR_TRANSMIT_BUFFER_FULL , ///< Transmit buffer is not empty
 HW_ERR_ETHER_ERROR_FILTERING            =FSP_ERR_ETHER_ERROR_FILTERING            , ///< Detect multicast frame when multicast frame filtering enable
 HW_ERR_ETHER_ERROR_PHY_COMMUNICATION    =FSP_ERR_ETHER_ERROR_PHY_COMMUNICATION    , ///< ETHERC/EDMAC has an error in the phy communication
 HW_ERR_ETHER_RECEIVE_BUFFER_ACTIVE      =FSP_ERR_ETHER_RECEIVE_BUFFER_ACTIVE      , ///< Receive buffer is active.
 HW_ERR_ETHER_PHY_ERROR_LINK=             FSP_ERR_ETHER_PHY_ERROR_LINK,             ///< PHY is not link up.
 HW_ERR_ETHER_PHY_NOT_READY =             FSP_ERR_ETHER_PHY_NOT_READY ,             ///< PHY has an error in the Auto-negotiation
 HW_ERR_QUEUE_FULL  =                     FSP_ERR_QUEUE_FULL  ,                     ///< Queue is full, cannot queue another data
 HW_ERR_QUEUE_EMPTY =                     FSP_ERR_QUEUE_EMPTY ,                     ///< Queue is empty, no data to dequeue
 HW_ERR_CTSU_SCANNING              =      FSP_ERR_CTSU_SCANNING              ,       ///< Scanning.
 HW_ERR_CTSU_NOT_GET_DATA          =      FSP_ERR_CTSU_NOT_GET_DATA          ,       ///< Not processed previous scan data.
 HW_ERR_CTSU_INCOMPLETE_TUNING     =      FSP_ERR_CTSU_INCOMPLETE_TUNING     ,       ///< Incomplete initial offset tuning.
 HW_ERR_CTSU_DIAG_NOT_YET          =      FSP_ERR_CTSU_DIAG_NOT_YET          ,       ///< Diagnosis of data collected no yet.
 HW_ERR_CTSU_DIAG_LDO_OVER_VOLTAGE =      FSP_ERR_CTSU_DIAG_LDO_OVER_VOLTAGE ,       ///< Diagnosis of LDO over voltage failed.
 HW_ERR_CTSU_DIAG_CCO_HIGH         =      FSP_ERR_CTSU_DIAG_CCO_HIGH         ,       ///< Diagnosis of CCO into 19.2uA failed.
 HW_ERR_CTSU_DIAG_CCO_LOW          =      FSP_ERR_CTSU_DIAG_CCO_LOW          ,       ///< Diagnosis of CCO into 2.4uA failed.
 HW_ERR_CTSU_DIAG_SSCG             =      FSP_ERR_CTSU_DIAG_SSCG             ,       ///< Diagnosis of SSCG frequency failed.
 HW_ERR_CTSU_DIAG_DAC              =      FSP_ERR_CTSU_DIAG_DAC              ,       ///< Diagnosis of non-touch count value failed.
 HW_ERR_CTSU_DIAG_OUTPUT_VOLTAGE   =      FSP_ERR_CTSU_DIAG_OUTPUT_VOLTAGE   ,       ///< Diagnosis of LDO output voltage failed.
 HW_ERR_CTSU_DIAG_OVER_VOLTAGE     =      FSP_ERR_CTSU_DIAG_OVER_VOLTAGE     ,       ///< Diagnosis of over voltage detection circuit failed.
 HW_ERR_CTSU_DIAG_OVER_CURRENT     =      FSP_ERR_CTSU_DIAG_OVER_CURRENT     ,       ///< Diagnosis of over current detection circuit failed.
 HW_ERR_CTSU_DIAG_LOAD_RESISTANCE  =      FSP_ERR_CTSU_DIAG_LOAD_RESISTANCE  ,       ///< Diagnosis of LDO internal resistance value failed.
 HW_ERR_CTSU_DIAG_CURRENT_SOURCE   =      FSP_ERR_CTSU_DIAG_CURRENT_SOURCE   ,       ///< Diagnosis of Current source value failed.
 HW_ERR_CTSU_DIAG_SENSCLK_GAIN     =      FSP_ERR_CTSU_DIAG_SENSCLK_GAIN     ,       ///< Diagnosis of SENSCLK frequency gain failed.
 HW_ERR_CTSU_DIAG_SUCLK_GAIN       =      FSP_ERR_CTSU_DIAG_SUCLK_GAIN       ,       ///< Diagnosis of SUCLK frequency gain failed.
 HW_ERR_CTSU_DIAG_CLOCK_RECOVERY   =      FSP_ERR_CTSU_DIAG_CLOCK_RECOVERY   ,       ///< Diagnosis of SUCLK clock recovery function failed.
 HW_ERR_CTSU_DIAG_CFC_GAIN         =      FSP_ERR_CTSU_DIAG_CFC_GAIN         ,       ///< Diagnosis of CFC oscillator gain failed.
 HW_ERR_CARD_INIT_FAILED     =            FSP_ERR_CARD_INIT_FAILED     ,            ///< SD card or eMMC device failed to initialize.
 HW_ERR_CARD_NOT_INSERTED    =            FSP_ERR_CARD_NOT_INSERTED    ,            ///< SD card not installed.
 HW_ERR_DEVICE_BUSY          =            FSP_ERR_DEVICE_BUSY          ,            ///< Device is holding DAT0 low or another operation is ongoing.
 HW_ERR_CARD_NOT_INITIALIZED =            FSP_ERR_CARD_NOT_INITIALIZED ,            ///< SD card was removed.
 HW_ERR_CARD_WRITE_PROTECTED =            FSP_ERR_CARD_WRITE_PROTECTED ,            ///< Media is write protected.
 HW_ERR_TRANSFER_BUSY        =            FSP_ERR_TRANSFER_BUSY        ,            ///< Transfer in progress.
 HW_ERR_RESPONSE             =            FSP_ERR_RESPONSE             ,            ///< Card did not respond or responded with an error.
 HW_ERR_MEDIA_FORMAT_FAILED =             FSP_ERR_MEDIA_FORMAT_FAILED ,             ///< Media format failed.
 HW_ERR_MEDIA_OPEN_FAILED   =             FSP_ERR_MEDIA_OPEN_FAILED   ,             ///< Media open failed.
 HW_ERR_CAN_DATA_UNAVAILABLE   =          FSP_ERR_CAN_DATA_UNAVAILABLE   ,          ///< No data available.
 HW_ERR_CAN_MODE_SWITCH_FAILED =          FSP_ERR_CAN_MODE_SWITCH_FAILED ,          ///< Switching operation modes failed.
 HW_ERR_CAN_INIT_FAILED        =          FSP_ERR_CAN_INIT_FAILED        ,          ///< Hardware initialization failed.
 HW_ERR_CAN_TRANSMIT_NOT_READY =          FSP_ERR_CAN_TRANSMIT_NOT_READY ,          ///< Transmit in progress.
 HW_ERR_CAN_RECEIVE_MAILBOX    =          FSP_ERR_CAN_RECEIVE_MAILBOX    ,          ///< Mailbox is setup as a receive mailbox.
 HW_ERR_CAN_TRANSMIT_MAILBOX   =          FSP_ERR_CAN_TRANSMIT_MAILBOX   ,          ///< Mailbox is setup as a transmit mailbox.
 HW_ERR_CAN_MESSAGE_LOST       =          FSP_ERR_CAN_MESSAGE_LOST       ,          ///< Receive message has been overwritten or overrun.
 HW_ERR_CAN_TRANSMIT_FIFO_FULL =          FSP_ERR_CAN_TRANSMIT_FIFO_FULL ,          ///< Transmit FIFO is full.
 HW_ERR_WIFI_CONFIG_FAILED    =           FSP_ERR_WIFI_CONFIG_FAILED    ,           ///< WiFi module Configuration failed.
 HW_ERR_WIFI_INIT_FAILED      =           FSP_ERR_WIFI_INIT_FAILED      ,           ///< WiFi module initialization failed.
 HW_ERR_WIFI_TRANSMIT_FAILED  =           FSP_ERR_WIFI_TRANSMIT_FAILED  ,           ///< Transmission failed
 HW_ERR_WIFI_INVALID_MODE     =           FSP_ERR_WIFI_INVALID_MODE     ,           ///< API called when provisioned in client mode
 HW_ERR_WIFI_FAILED           =           FSP_ERR_WIFI_FAILED           ,           ///< WiFi Failed.
 HW_ERR_WIFI_SCAN_COMPLETE    =           FSP_ERR_WIFI_SCAN_COMPLETE    ,           ///< Wifi scan has completed.
 HW_ERR_WIFI_AP_NOT_CONNECTED =           FSP_ERR_WIFI_AP_NOT_CONNECTED ,           ///< WiFi module is not connected to access point
 HW_ERR_CELLULAR_CONFIG_FAILED       =    FSP_ERR_CELLULAR_CONFIG_FAILED       ,    ///< Cellular module Configuration failed.
 HW_ERR_CELLULAR_INIT_FAILED         =    FSP_ERR_CELLULAR_INIT_FAILED         ,    ///< Cellular module initialization failed.
 HW_ERR_CELLULAR_TRANSMIT_FAILED     =    FSP_ERR_CELLULAR_TRANSMIT_FAILED     ,    ///< Transmission failed
 HW_ERR_CELLULAR_FW_UPTODATE         =    FSP_ERR_CELLULAR_FW_UPTODATE         ,    ///< Firmware is uptodate
 HW_ERR_CELLULAR_FW_UPGRADE_FAILED   =    FSP_ERR_CELLULAR_FW_UPGRADE_FAILED   ,    ///< Firmware upgrade failed
 HW_ERR_CELLULAR_FAILED              =    FSP_ERR_CELLULAR_FAILED              ,    ///< Cellular Failed.
 HW_ERR_CELLULAR_INVALID_STATE       =    FSP_ERR_CELLULAR_INVALID_STATE       ,    ///< API Called in invalid state.
 HW_ERR_CELLULAR_REGISTRATION_FAILED =    FSP_ERR_CELLULAR_REGISTRATION_FAILED ,    ///< Cellular Network registration failed
 HW_ERR_BLE_FAILED              =         FSP_ERR_BLE_FAILED              ,         ///< BLE operation failed
 HW_ERR_BLE_INIT_FAILED         =         FSP_ERR_BLE_INIT_FAILED         ,         ///< BLE device initialization failed
 HW_ERR_BLE_CONFIG_FAILED       =         FSP_ERR_BLE_CONFIG_FAILED       ,         ///< BLE device configuration failed
 HW_ERR_BLE_PRF_ALREADY_ENABLED =         FSP_ERR_BLE_PRF_ALREADY_ENABLED ,         ///< BLE device Profile already enabled
 HW_ERR_BLE_PRF_NOT_ENABLED     =         FSP_ERR_BLE_PRF_NOT_ENABLED     ,         ///< BLE device not enabled
 HW_ERR_BLE_ABS_INVALID_OPERATION =       FSP_ERR_BLE_ABS_INVALID_OPERATION ,       ///< Invalid operation is executed.
 HW_ERR_BLE_ABS_NOT_FOUND         =       FSP_ERR_BLE_ABS_NOT_FOUND         ,       ///< Valid data or free space is not found.
 HW_ERR_CRYPTO_CONTINUE              =  FSP_ERR_CRYPTO_CONTINUE              ,  ///< Continue executing function
 HW_ERR_CRYPTO_SCE_RESOURCE_CONFLICT =  FSP_ERR_CRYPTO_SCE_RESOURCE_CONFLICT ,  ///< Hardware resource busy
 HW_ERR_CRYPTO_SCE_FAIL              =  FSP_ERR_CRYPTO_SCE_FAIL              ,  ///< Internal I/O buffer is not empty
 HW_ERR_CRYPTO_SCE_HRK_INVALID_INDEX =  FSP_ERR_CRYPTO_SCE_HRK_INVALID_INDEX ,  ///< Invalid index
 HW_ERR_CRYPTO_SCE_RETRY             =  FSP_ERR_CRYPTO_SCE_RETRY             ,  ///< Retry
 HW_ERR_CRYPTO_SCE_VERIFY_FAIL       =  FSP_ERR_CRYPTO_SCE_VERIFY_FAIL       ,  ///< Verify is failed
 HW_ERR_CRYPTO_SCE_ALREADY_OPEN      =  FSP_ERR_CRYPTO_SCE_ALREADY_OPEN      ,  ///< HW SCE module is already opened
 HW_ERR_CRYPTO_NOT_OPEN              =  FSP_ERR_CRYPTO_NOT_OPEN              ,  ///< Hardware module is not initialized
 HW_ERR_CRYPTO_UNKNOWN               =  FSP_ERR_CRYPTO_UNKNOWN               ,  ///< Some unknown error occurred
 HW_ERR_CRYPTO_NULL_POINTER          =  FSP_ERR_CRYPTO_NULL_POINTER          ,  ///< Null pointer input as a parameter
 HW_ERR_CRYPTO_NOT_IMPLEMENTED       =  FSP_ERR_CRYPTO_NOT_IMPLEMENTED       ,  ///< Algorithm/size not implemented
 HW_ERR_CRYPTO_RNG_INVALID_PARAM     =  FSP_ERR_CRYPTO_RNG_INVALID_PARAM     ,  ///< An invalid parameter is specified
 HW_ERR_CRYPTO_RNG_FATAL_ERROR       =  FSP_ERR_CRYPTO_RNG_FATAL_ERROR       ,  ///< A fatal error occurred
 HW_ERR_CRYPTO_INVALID_SIZE          =  FSP_ERR_CRYPTO_INVALID_SIZE          ,  ///< Size specified is invalid
 HW_ERR_CRYPTO_INVALID_STATE         =  FSP_ERR_CRYPTO_INVALID_STATE         ,  ///< Function used in an valid state
 HW_ERR_CRYPTO_ALREADY_OPEN          =  FSP_ERR_CRYPTO_ALREADY_OPEN          ,  ///< control block is already opened
 HW_ERR_CRYPTO_INSTALL_KEY_FAILED    =  FSP_ERR_CRYPTO_INSTALL_KEY_FAILED    ,  ///< Specified input key is invalid.
 HW_ERR_CRYPTO_AUTHENTICATION_FAILED =  FSP_ERR_CRYPTO_AUTHENTICATION_FAILED ,  ///< Authentication failed
 HW_ERR_CRYPTO_SCE_KEY_SET_FAIL      =  FSP_ERR_CRYPTO_SCE_KEY_SET_FAIL      ,  ///< Failure to Init Cipher
 HW_ERR_CRYPTO_SCE_AUTHENTICATION    =  FSP_ERR_CRYPTO_SCE_AUTHENTICATION    ,  ///< Authentication failed
 HW_ERR_CRYPTO_SCE_PARAMETER         =  FSP_ERR_CRYPTO_SCE_PARAMETER         ,  ///< Input date is illegal.
 HW_ERR_CRYPTO_SCE_PROHIBIT_FUNCTION =  FSP_ERR_CRYPTO_SCE_PROHIBIT_FUNCTION ,  ///< An invalid function call occurred.
 HW_ERR_CRYPTO_COMMON_NOT_OPENED      = FSP_ERR_CRYPTO_COMMON_NOT_OPENED      , ///< Crypto Framework Common is not opened
 HW_ERR_CRYPTO_HAL_ERROR              = FSP_ERR_CRYPTO_HAL_ERROR              , ///< Cryoto HAL module returned an error
 HW_ERR_CRYPTO_KEY_BUF_NOT_ENOUGH     = FSP_ERR_CRYPTO_KEY_BUF_NOT_ENOUGH     , ///< Key buffer size is not enough to generate a key
 HW_ERR_CRYPTO_BUF_OVERFLOW           = FSP_ERR_CRYPTO_BUF_OVERFLOW           , ///< Attempt to write data larger than what the buffer can hold
 HW_ERR_CRYPTO_INVALID_OPERATION_MODE = FSP_ERR_CRYPTO_INVALID_OPERATION_MODE , ///< Invalid operation mode.
 HW_ERR_MESSAGE_TOO_LONG              = FSP_ERR_MESSAGE_TOO_LONG              , ///< Message for RSA encryption is too long.
 HW_ERR_RSA_DECRYPTION_ERROR          = FSP_ERR_RSA_DECRYPTION_ERROR          , ///< RSA Decryption error.
 HW_ERR_SENSOR_INVALID_DATA             = FSP_ERR_SENSOR_INVALID_DATA             , ///< Data is invalid.
 HW_ERR_SENSOR_IN_STABILIZATION         = FSP_ERR_SENSOR_IN_STABILIZATION         , ///< Sensor is stabilizing.
 HW_ERR_SENSOR_MEASUREMENT_NOT_FINISHED = FSP_ERR_SENSOR_MEASUREMENT_NOT_FINISHED , ///< Measurement is not finished.
 HW_ERR_COMMS_BUS_NOT_OPEN =              FSP_ERR_COMMS_BUS_NOT_OPEN ,              ///< Bus is not open.
}Hw_Err;


#endif /* BOARD_RA_BOARD_BOARD_COMMON_H_ */
